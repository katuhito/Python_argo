"""ハノイの塔"""
# ハノイの塔では、次のルールをのもとにすべての円盤を移動する。
    #大きさの異なる複数の円盤があり、小さな円盤の上に大きな円盤を積むことはできない
    #円盤を置ける場所は3カ所あり、最初は1カ所にすべて積まれている
    #円盤を1回に1枚ずつ移動し、すべての円盤を別の場所に移動するまでの回数を調べる
    #例えば、3枚の円盤があった場合は、7回移動できる。(図4.16)
#このハノイの塔において、ｎ枚の円盤を移動するのに必要な最小の移動回数と、その移動手順を求めることを考える。小さなな円盤の上に大きな円盤は積めないので、n枚の演算を移動するにはn-1枚を移動した後に最大の1枚を移動し、その上にn-1枚を移動すると考えられる。
#このn-1枚を移動するには、n-2枚を移動した後に一番下の1枚を移動し、その上にn-2枚を移動すればよい。これを繰り返すことにより、再帰的に考えることができる。

#この移動方法を実装する。円盤を配置する場所をそれぞれa,b,cとし、aからbに円盤を移動することを「a->b」を出力することを考える。ここで、移動に必要なパラメータは、「残り枚数」「移動元」「移動先」「経由場所」の4つである。これらを引数とする関数を定義して、その中で移動内容を出力するものとする。
#処理する枚数は、実行した後で標準入力から与えることで、その値を実行時に変えられるようにする。

#src:移動元　dist:移動先　via:経由場所
def hanoi(n, src, dist, via):
    if n > 1:
        hanoi(n - 1, src, via, dist)  #n-1枚を移動元から経由場所に移す
        print(src + ' -> ' + dist)
        hanoi(n - 1, via, dist, src)  #n-1枚を経由場所から移動先に移す
    else:
        print(src + ' -> ' + dist)

n = int(input())
hanoi(n, 'a', 'b', 'c')


