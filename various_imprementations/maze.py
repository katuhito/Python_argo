"""迷路の探索(番兵)"""
#番兵：番兵とは、終了条件としてリストの最後に負荷するデータのことであり、探索の実装をシンプルにするために使われる.
#下記のリスト形式で表現されるものを迷路に見立てて、スタートSから通路を通ってゴールGまで行く経路を探す。
#迷路の壁を「9」、通路を「0」、ゴールを「1」という数字を使って、2次元のリスト形式で、迷路を下記のように表現する。
#なお、移動する最中に通った通路は「2」という数字で上書きしていくものとする。

maze = [
    [9,9,9,9,9,9,9,9,9,9,9,9],
    [9,0,0,0,9,0,0,0,0,0,0,9],
    [9,0,9,0,0,0,9,9,0,9,0,9],
    [9,0,9,9,0,9,0,0,0,9,0,9],
    [9,0,0,0,9,0,0,9,9,0,9,9],
    [9,9,9,0,0,9,0,9,0,0,0,9],
    [9,0,0,0,9,0,9,0,0,9,1,9],
    [9,0,9,0,0,0,0,9,0,0,9,9],
    [9,0,0,9,0,9,0,0,9,0,0,9],
    [9,0,9,0,9,0,9,0,0,9,0,9],
    [9,0,0,0,0,0,0,9,0,0,0,9],
    [9,9,9,9,9,9,9,9,9,9,9,9]
]

#幅優先探索で探す
#スタートから順に、近いところから動ける範囲を幅優先探索で調べることを考える。上下左右の動きながら調べて、一度探索済みのところは再度探索しないものとする。この処理を繰り返して、ゴールに到達するか、動けなくなるところがなくなった時点で探索完了である。
#プログラムでは最初にスタート位置を探索するリストとしてセットする。上下左右に移動可能な場所をリストとして追加しながら、リストがなくなるまで(探索できる場所がなくなるまで)繰り返す。
#ゴールの位置にまで着くと処理は終了できる。移動回数を加算しながら探索し、ゴールまでの移動回数を出力している。

#スタート位置(x座標、y座標、移動回数)をセット
pos = [[1,1,0]]

while len(pos) > 0:
    x, y, depth = pos.pop(0)  #リストから探索する位置を取得
    #ゴールに着くと終了
    if maze[x][y] == 1:
        print(depth)
        break

    #探索済みとしてセット
    maze[x][y] = 2

    #上下左右を探索する
    if maze[x - 1][y] < 2:
        pos.append([x - 1, y, depth + 1])  #移動回数を増やして左をリストに追加
    
    if maze[x + 1][y] < 2:
        pos.append([x + 1, y, depth + 1])  #移動回数を増やして右をリストに追加

    if maze[x][y - 1] < 2:
        pos.append([x, y - 1, depth + 1])  #移動回数を増やして上をリストに追加

    if maze[x][y + 1] < 2:
        pos.append([x, y + 1, depth + 1])  #移動回数を増やして下をリストに追加

        